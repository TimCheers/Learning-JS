console.log("üü© Task 1.1: –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞");
// –í—Ö–æ–¥: –º–∞—Å—Å–∏–≤ [10, 20, 30]
// –ü–æ–ª—É—á–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ Symbol.iterator
const nums = [10, 20, 30];
console.log(nums[Symbol.iterator]());


console.log("üü© Task 1.2: –ú–µ—Ç–æ–¥ next()");
// –í—ã–∑–æ–≤–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä.next() –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏ –≤—ã–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è
const iter = nums[Symbol.iterator]();
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());
console.log(iter.next());


console.log("üü© Task 1.3: –°–≤–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä");
// –°–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç range —Å –ø–æ–ª—è–º–∏ from = 1, to = 4
// –†–µ–∞–ª–∏–∑—É–π –≤ –Ω—ë–º Symbol.iterator –≤—Ä—É—á–Ω—É—é
const range = {
  from: 1,
  to: 4,
  [Symbol.iterator]() {
    let current = this.from;
    let last = this.to;
    return {
      next() {
        if (current <= last) {
          return { value: current++, done: false };
        } else {
          return { done: true };
        }
      }
    };
  }
};

for (const num of range) {
  console.log(num);
}


console.log("üü© Task 1.4: –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç");
// –°–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç, –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –ø–æ –±—É–∫–≤–∞–º —Å–≤–æ–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ text = "JS"
const param = {
    index: 0,
    text: "JS",
    [Symbol.iterator]() {
        return {
            next() {
                var i = this.index;
                if (i != this.text.length) {
                    i++;
                    return { value: this.text[i - 1], done: false }
                };
                return { done: true };
            }
        };
    }
};


console.log("üü© Task 2.1: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä");
// –ù–∞–ø–∏—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π 3 –∑–Ω–∞—á–µ–Ω–∏—è: "one", "two", "three"
// –ü–æ–ª—É—á–∏ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ .next()
function* gena() {
    yield "one";
    yield "two";
    yield "three";
    return "end";
}
const numGen = gena();
console.log(numGen.next());
console.log(numGen.next());
console.log(numGen.next());


console.log("üü© Task 2.2: return –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ");
// –î–æ–±–∞–≤—å return "end" –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
// –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
console.log(numGen.next());


console.log("üü© Task 2.3: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ —Ü–∏–∫–ª–µ");
// –ü—Ä–æ–π–¥–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤ for..of
const numGen2 = gena();
for (const num of numGen2) {
    console.log(num);
}


console.log("üü© Task 2.4: –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä");
// –°–æ–∑–¥–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å yield –∏ –ø–µ—Ä–µ–¥–∞–π –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ next()
function* gen() {
  const first = yield "–í–≤–µ–¥–∏—Ç–µ –∏–º—è";
  console.log("–ò–º—è:", first);
}
const g = gen();
console.log(g.next());
console.log(g.next("Tim"));


console.log("üü© Task 2.5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞");
// –í –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π try..catch
// –ò–∑–≤–Ω–µ –≤—ã–∑–æ–≤–∏ .throw() —Å –æ—à–∏–±–∫–æ–π
function* generateData() {
    try {
        yield "Tom";
        yield "Bob";
        yield "Hello Work";
    }
    catch (error) {
        console.log("Error:", error);
    }
}
const personGenerator = generateData();
console.log(personGenerator.next());
personGenerator.throw("Something wrong");
console.log(personGenerator.next());



console.log("üü© Task 3.1: Set: —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä");
// –°–æ–∑–¥–∞–π Set –∏–∑ –º–∞—Å—Å–∏–≤–∞ [1, 2, 3, 1, 2, 4]
// –í—ã–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞
const arr = new Set([1, 2, 3, 1, 2, 4]);
console.log(arr);


console.log("üü© Task 3.2: Set: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ");
// –î–æ–±–∞–≤—å —á–∏—Å–ª–æ 5, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏ 2
arr.add(5);
arr.delete(2);
console.log(arr);


console.log("üü© Task 3.3: Set: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è");
// –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 3 –∏ 10
console.log(arr.has(3));
console.log(arr.has(10));


console.log("üü© Task 3.4: Set: –ø–µ—Ä–µ–±–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞");
// –ü–µ—Ä–µ–±–µ—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å –ø–æ–º–æ—â—å—é for..of
for (n of arr) {
    console.log(n);
}


console.log("üü© Task 3.5: Set: –∏—Ç–µ—Ä–∞—Ç–æ—Ä");
// –ü–æ–ª—É—á–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä Set –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤—Ä—É—á–Ω—É—é
const setIter = arr.values();
console.log(setIter.next());
console.log(setIter.next());
console.log(setIter.next());
console.log(setIter.next());


console.log("üü© Task 3.6: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞");
// –í—Ö–æ–¥: –º–∞—Å—Å–∏–≤ ["a", "b", "a", "c", "b"]
// –£–¥–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä—ã —Å –ø–æ–º–æ—â—å—é Set
const rArr = ["a", "b", "a", "c", "b"];
const newSet = new Set(rArr);
const newArr = Array.from(newSet);
console.log(newArr);


console.log("üü© Task 4.1: Map: —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä");
// –°–æ–∑–¥–∞–π Map –∏ –¥–æ–±–∞–≤—å –ø–∞—Ä—ã: "name" ‚Üí "Tim", "age" ‚Üí 30
// –í—ã–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä Map
const userMap = new Map([["name", "Tim"], ["age", 30]]);
console.log(userMap);


console.log("üü© Task 4.2: Map: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ");
// –ò–∑–º–µ–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ "age" –Ω–∞ 31
userMap.set("age", 31);
console.log(userMap);


console.log("üü© Task 4.3: Map: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ");
// –ü–æ–ª—É—á–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É "name", –∑–∞—Ç–µ–º —É–¥–∞–ª–∏ –∫–ª—é—á "age"
console.log(userMap.get("name"));
userMap.delete("age");
console.log(userMap);


console.log("üü© Task 4.4: Map: –ø–µ—Ä–µ–±–æ—Ä");
// –ü–µ—Ä–µ–±–µ—Ä–∏ Map —Å –ø–æ–º–æ—â—å—é for..of, –≤—ã–≤–µ–¥–∏ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
for (item of userMap) {
    console.log(`${item[0]} - ${item[1]}`);
}


console.log("üü© Task 5.1: WeakSet");
// –°–æ–∑–¥–∞–π WeakSet –∏ –¥–æ–±–∞–≤—å –≤ –Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç user = { name: "Alice" }
var user = {
    name: "Alice"
}
const weakSet1 = new WeakSet();
weakSet1.add(user);
console.log(weakSet1);


console.log("üü© Task 5.2: WeakSet –∏ GC");
// –£–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ user, –ø—Ä–æ–≤–µ—Ä—å –≤—Ä—É—á–Ω—É—é, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏ –≤ WeakSet
user = undefined;
console.log(weakSet1);


console.log("üü© Task 6.1: WeakMap");
// –°–æ–∑–¥–∞–π WeakMap –∏ –¥–æ–±–∞–≤—å –≤ –Ω–µ–≥–æ –∫–ª—é—á–æ–º –æ–±—ä–µ–∫—Ç user = { id: 1 }
var user1 = {
    name: "Tim"
}
var userId1 = {
    id: 1
}
const weakMap1 = new WeakMap();
weakMap1.set(userId1, user1);
console.log(weakMap1);


console.log("üü© Task 6.2: WeakMap –∏ GC");
// –£–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç user, –ø—Ä–æ–≤–µ—Ä—å –≤—Ä—É—á–Ω—É—é, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏ –≤ WeakMap
user1 = undefined;
userId1 = undefined;
console.log(weakMap1);