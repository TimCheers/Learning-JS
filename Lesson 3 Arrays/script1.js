console.log("üü© Task 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏");
//
// –°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤—ã:
// - —á–µ—Ä–µ–∑ –ª–∏—Ç–µ—Ä–∞–ª
// - —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ new Array
// - —Å –ø–æ–º–æ—â—å—é Array.of()
// - —Å –ø–æ–º–æ—â—å—é Array.from() –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
//
const arr1 = [];
const arr2 = new Array();
const arr3 = Array.of("a", "b", "c");
const arr4 = Array.from("Hello");
const arr5 = Array.from(arr3);
console.log(arr1);
console.log(arr2);
console.log(arr3);
console.log(arr4);
console.log(arr5);


console.log("üü© Task 2: –°–≤–æ–π—Å—Ç–≤–æ length");
//
// –ü—Ä–æ–≤–µ—Ä—å –¥–ª–∏–Ω—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤.
// –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –¥–ª–∏–Ω—É –≤—Ä—É—á–Ω—É—é.
// –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ length —É–º–µ–Ω—å—à–∏—Ç—å –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å?
//
//–ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞ –¥–æ–±–∞–≤—è—Ç—Å—è –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–∏ —É–º–µ–Ω—à–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞ –∫—Ä–∞–π–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω.
console.log(arr3.length);
arr3.length = 5;
console.log(arr3.length);
console.log(arr3);
arr3.length = 2;
console.log(arr3);


console.log("üü© Task 3: Spread-–æ–ø–µ—Ä–∞—Ç–æ—Ä: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤");
//
// –û–±—ä–µ–¥–∏–Ω–∏ 2 –º–∞—Å—Å–∏–≤–∞ –≤ 1 —Å –ø–æ–º–æ—â—å—é spread.
// –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞ –∏ —Å—Ç—Ä–æ–∫–∏.
//
const arr6 = [...arr3, "For example", ...arr4];
console.log(arr6);


console.log("üü© Task 4: Spread-–æ–ø–µ—Ä–∞—Ç–æ—Ä: –ø–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤");
//
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
// –ü–µ—Ä–µ–¥–∞–π –µ–π –º–∞—Å—Å–∏–≤ –∏–∑ —Ç—Ä—ë—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ spread.
//
arr3[2] = "c";
function print(a, b, c) {
    console.log(`${a}, ${b}, ${c}`);
}
print(...arr3);


console.log("üü© Task 5: Spread-–æ–ø–µ—Ä–∞—Ç–æ—Ä: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞");
//
// –°–æ–∑–¥–∞–π –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞.
// –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª.
//
const arr3Copy = [...arr3];
arr3Copy[0] = "WWW";
console.log(arr3);
console.log(arr3Copy); //arr3[0] –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ 


console.log("üü© Task 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö");
//
// –î–æ–±–∞–≤—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤ —Å –ø–æ–º–æ—â—å—é push(), unshift().
//
arr3Copy.push("last");
arr3Copy.unshift("first");
console.log(arr3Copy);


console.log("üü© Task 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É");
//
// –ü—Ä–∏—Å–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.
// –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ç–µ–∫—É—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã?
//
arr3Copy.splice(3, 0, "midle");
console.log(arr3Copy);
arr3Copy.splice(7, 0, "test");
console.log(arr3Copy); //–ï—Å–ª–∏ –≤—ã–π—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã, —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω–µ—Ü


console.log("üü© Task 8: –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö");
//
// –£–¥–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é pop() –∏ shift().
//
arr3Copy.pop();
arr3Copy.shift();
console.log(arr3Copy);


console.log("üü© Task 9: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É —á–µ—Ä–µ–∑ splice()");
//
// –£–¥–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞.
//
arr3Copy.splice(2, 1);
console.log(arr3Copy);


console.log("üü© Task 10: –ó–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
//
// –ó–∞–º–µ–Ω–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ —Å –ø–æ–º–æ—â—å—é splice().
//
arr3Copy.splice(1, 2, "B", "C");
console.log(arr3Copy);


console.log("üü© Task 11: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞");
//
// –°–¥–µ–ª–∞–π –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–º–æ—â—å—é slice().
//
const arr3CopyX2 = arr3Copy.slice();
arr3CopyX2[2] = "QWERTY";
console.log(arr3);
console.log(arr3Copy);
console.log(arr3CopyX2);


console.log("üü© Task 12: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. toSpliced()");
//
// –ò—Å–ø–æ–ª—å–∑—É–π toSpliced(), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
//
const arr7 = arr3Copy.toSpliced(2, 2, "LOL", "KEK");
console.log(arr7);
const arr8 = arr3Copy.toSpliced(1, 2);
console.log(arr8);


console.log("üü© Task 13: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: sort() –∏ toSorted()");
//
// –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π –º–∞—Å—Å–∏–≤—ã —Å —á–∏—Å–ª–∞–º–∏ –∏ —Å—Ç—Ä–æ–∫–∞–º–∏.
// –ò—Å–ø–æ–ª—å–∑—É–π sort() –∏ toSorted().
// –ü—Ä–æ–≤–µ—Ä—å, –≤–ª–∏—è–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª.
//
const arrNumb = [15, 200, 35, 5]
const arrStr = ["Tom", "Sam", "Bob", "Alice", "Kate"]
const arrNumbSortCopy = arrNumb.toSorted((a, b) => a - b);
const arrStrSortCopy = arrStr.toSorted();
console.log("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏:");
console.log(arrNumbSortCopy);
console.log(arrStrSortCopy);
console.log("–û—Ä–∏–≥–∏–Ω–∞–ª—ã –ø–æ—Å–ª–µ –∫–æ–ø–∏–∏:");
console.log(arrNumb);
console.log(arrStr);
console.log("–û—Ä–∏–≥–∏–Ω–∞–ª—ã –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:");
arrNumb.sort((a, b) => a - b)
arrStr.sort();
console.log(arrNumb);
console.log(arrStr);

console.log("üü© Task 14: –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: reverse() –∏ toReversed()");
//
// –†–∞–∑–≤–µ—Ä–Ω–∏ –º–∞—Å—Å–∏–≤ –æ–±—ã—á–Ω—ã–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º.
//
const arr9 = arrNumb.toReversed();
arrNumb.reverse();
console.log(arr9);
console.log(arrNumb);


console.log("üü© Task 15: –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞");
//
// –ò—Å–ø–æ–ª—å–∑—É–π indexOf() –∏ lastIndexOf().
//
arrNumb.splice(3, 0, 200);
console.log(arrNumb);
console.log(arrNumb.indexOf(200));
console.log(arrNumb.lastIndexOf(200));


console.log("üü© Task 16: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞");
//
// –ò—Å–ø–æ–ª—å–∑—É–π includes().
//
console.log(arrNumb.includes(35));
console.log(arrNumb.includes(35, 2));


console.log("üü© Task 16.1 –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–¥—Ç–µ–º—ã");
const numbers = [1, -12, 8, -4, 25, 42];
const passed = numbers.every(n => n > 0);
console.log(passed);
const numbers1 = [1, -12, 8, -4, 25, 42];
const passed1 = numbers1.some(n => n > 0);
console.log(passed1); // true
const numbers2 = [1, -12, 8, -4, 25, 42];
const filteredNumbers = numbers2.filter(n => n > 0);
console.log(filteredNumbers); // [1, 8, 25, 42]


console.log("üü© Task 17: –ü–µ—Ä–µ–±–æ—Ä forEach()");
//
// –ü–µ—Ä–µ–±–µ—Ä–∏ –º–∞—Å—Å–∏–≤ –∏ –≤—ã–≤–µ–¥–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–º.
//
arrNumb.forEach((n, i) =>
    console.log(`${i}: ${n}`)
); 


console.log("üü© Task 18: map()");
//
// –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª: –≤–æ–∑–≤–µ–¥–∏ –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç.
//
const squares = arrNumb.map(n => n * n);
console.log(squares);

console.log("üü© Task 19: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
//
// –ù–∞–π–¥–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é find() –∏ findIndex().
//
console.log(arrNumb.find(n => n < 20));
console.log(arrNumb.findIndex(n => n < 20));


console.log("üü© Task 20: flat() –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ");
//
// –°–¥–µ–ª–∞–π –º–∞—Å—Å–∏–≤ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –∏ "—Ä–∞—Å–ø–ª—é—â–∏" –µ–≥–æ.
//
const people = ["Tom", "Bob", ["Alice", "Kate", ["Sam", "Ann"]]];
const flattenPeople = people.flat(2);
console.log(flattenPeople);


console.log("üü© Task 21: –ú–µ—Ç–æ–¥ with()");
//
// –ò–∑–º–µ–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é with().
//
const arrNumb2 = arrNumb.with(0, 100);
console.log(arrNumb);
console.log(arrNumb2);


console.log("üü© Task 22: reduce()");
//
// –ò—Å–ø–æ–ª—å–∑—É–π reduce(), —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ.
//
const sum = arrNumb.reduce((prev, current) => prev += current);
console.log(sum);


console.log("üü© Task 23: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤");
//
// –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –º–∞—Å—Å–∏–≤: –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–π —á—ë—Ç–Ω—ã–µ, —É–¥–≤–æ–π, –ø—Ä–æ—Å—É–º–º–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
//
const dSum = arrNumb
    .filter(n => n % 2 == 0)
    .map(n => n * 2)
    .reduce((prev, current) => prev += current);
console.log(dSum);


console.log("üü© Task 24: –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤");
//
// –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å CustomArray, —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–π –æ—Ç Array.
// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏ –º–µ—Ç–æ–¥ push(), —á—Ç–æ–±—ã –æ–Ω –ø–∏—Å–∞–ª –≤ –∫–æ–Ω—Å–æ–ª—å, —Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ.
//
class CustomArray extends Array {
    constructor(...elem) {
        super(...elem);
    }
    push(...nums) {
        console.log("–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ " + nums.length);
        super.push(...nums);
    }
}
const specificArrey = new CustomArray(2, 5, 32, 23, 34, 654, 2, 65, 6);
console.log(specificArrey);
specificArrey.push(...arrNumb);
console.log(specificArrey);